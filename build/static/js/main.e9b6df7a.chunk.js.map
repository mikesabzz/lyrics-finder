{"version":3,"sources":["components/Lyrics/index.js","components/FormInput/index.js","components/ITunes/index.js","components/LyricFinder/index.js","App.js","serviceWorker.js","index.js"],"names":["Lyrics","props","theLyrics","loading","artistLyrics","lyrics","className","hidden","undefined","FormInput","onSubmit","handleSubmit","type","value","artist","name","placeholder","onChange","handleChange","required","title","handleSecondChange","ITunes","array","itunes","map","itune","artistName","toLowerCase","src","artworkUrl100","controls","previewUrl","ituneAudio","LyricFinder","fetchData","a","async","setState","error","axios","get","state","then","res","data","catch","console","log","fetchItunesData","results","bind","clear","this","reset","event","preventDefault","target","document","body","style","backgroundColor","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","href","rel","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iXAeeA,G,MAZA,SAACC,GACZ,IAAMC,EAAYD,EAAME,QAAU,kDAA+BF,EAAMG,aAAaC,OACpF,OACI,yBAAKC,UAAU,cACVL,EAAMM,aAAuCC,GAA7BP,EAAMG,aAAaC,OAChC,kDAEA,6BAAMH,MC8BPO,G,MArCG,SAACR,GACX,OACI,6BACI,yBAAKK,UAAU,eACX,0BAAMI,SAAUT,EAAMU,cAClB,+BACI,2BACIL,UAAU,6BACVM,KAAK,OACLC,MAAOZ,EAAMa,OACbC,KAAK,SACLC,YAAY,cACZC,SAAUhB,EAAMiB,aAChBC,UAAQ,KAGhB,6BACA,+BACI,2BACIb,UAAU,6BACVM,KAAK,OACLC,MAAOZ,EAAMmB,MACbL,KAAK,QACLC,YAAY,aACZC,SAAUhB,EAAMoB,mBAChBF,UAAQ,KAGhB,6BACA,4BAAQb,UAAU,qCACd,0BAAMA,UAAU,+BADpB,gBCNTgB,G,MAvBA,SAACrB,GACZ,IAAMsB,EAAQtB,EAAMuB,OAAOC,KAAI,SAAAC,GAC3B,OAAIzB,EAAMa,QAAUY,EAAMC,WAAWC,cACzB,8BAGR,yBAAKtB,UAAU,cACX,yBAAKuB,IAAKH,EAAMI,gBAChB,6BACA,2BAAOC,UAAQ,GACX,4BAAQF,IAAKH,EAAMM,kBAIzBC,EAAahC,EAAME,QAAU,mDAAgCoB,EACvE,OACI,yBAAKjB,UAAU,cACX,6BAAM2B,MCsFHC,E,YAnGX,aAAe,IAAD,8BACV,+CAgBJC,UAAY,oBAAAC,EAAAC,OAAA,uDACR,EAAKC,SAAS,CAAEnC,SAAS,EAAMoC,OAAO,IAD9B,WAAAH,EAAA,MAEFI,IAAMC,IAAN,oCAAuC,EAAKC,MAAM5B,OAAlD,YAA4D,EAAK4B,MAAMtB,QACxEuB,MAAK,SAAAC,GACF,EAAKN,SAAS,CACVnC,SAAS,EACTC,aAAcwC,EAAIC,UAGzBC,OAAM,SAAAP,GACHQ,QAAQC,IAAIT,GACZ,EAAKD,SAAS,CAACC,OAAO,EAAMpC,SAAS,QAXrC,sCAjBE,EAgCd8C,gBAAkB,oBAAAb,EAAAC,OAAA,uDACd,EAAKC,SAAS,CAAEnC,SAAS,EAAMoC,OAAO,IADxB,WAAAH,EAAA,MAERI,IAAMC,IAAN,+CAAkD,EAAKC,MAAM5B,OAA7D,iBAA4E,EAAK4B,MAAMtB,MAAvF,aACLuB,MAAK,SAAAC,GACF,EAAKN,SAAS,CACVnC,SAAS,EACTqB,OAAQoB,EAAIC,KAAKK,aAGxBJ,OAAM,SAAAP,GACHQ,QAAQC,IAAIT,GACZ,EAAKD,SAAS,CAACC,OAAO,EAAMpC,SAAS,QAX3B,sCA9Bd,EAAKuC,MAAQ,CACTvC,SAAS,EACTC,aAAc,GACdmC,MAAO,GACPzB,OAAQ,GACRM,MAAO,GACPI,OAAQ,GACRjB,QAAQ,GAEZ,EAAKI,aAAe,EAAKA,aAAawC,KAAlB,gBACpB,EAAKjC,aAAe,EAAKA,aAAaiC,KAAlB,gBACpB,EAAK9B,mBAAqB,EAAKA,mBAAmB8B,KAAxB,gBAC1B,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAdH,E,qEA+CVE,KAAKC,U,mCAEIC,GACTA,EAAMC,iBADU,MAEMD,EAAME,OAArB1C,EAFS,EAETA,KAAMF,EAFG,EAEHA,MACbwC,KAAKf,SAAL,eAAgBvB,EAAOF,M,yCAER0C,GACfA,EAAMC,iBADgB,MAEAD,EAAME,OAArB1C,EAFe,EAEfA,KAAMF,EAFS,EAETA,MACbwC,KAAKf,SAAL,eAAgBvB,EAAOF,M,mCAEd0C,GACTA,EAAMC,iBACNH,KAAKlB,YACLkB,KAAKJ,kBACLI,KAAKnC,aAAaqC,GAClBF,KAAKhC,mBAAmBkC,GACxBF,KAAKf,SAAS,CAAE/B,QAAS,M,0CAGzBmD,SAASC,KAAKC,MAAMC,gBAAkB,U,+BAGtC,OACI,6BACI,kBAAC,EAAD,CACIlD,aAAc0C,KAAK1C,aACnBO,aAAcmC,KAAKnC,aACnBG,mBAAoBgC,KAAKhC,mBACzBP,OAAQuC,KAAKX,MAAM5B,OACnBM,MAAOiC,KAAKX,MAAMtB,MAClBgC,MAAOC,KAAKD,MACZ7C,OAAQ8C,KAAKX,MAAMnC,SAEvB,kBAAC,EAAD,CACIgC,MAAOc,KAAKX,MAAMH,MAClBnC,aAAciD,KAAKX,MAAMtC,aACzBD,QAASkD,KAAKX,MAAMvC,QACpBI,OAAQ8C,KAAKX,MAAMnC,SAEvB,kBAAC,EAAD,CACIgC,MAAOc,KAAKX,MAAMH,MAClBf,OAAQ6B,KAAKX,MAAMlB,OACnBrB,QAASkD,KAAKX,MAAMvC,QACpBW,OAAQuC,KAAKX,MAAM5B,OACnBM,MAAOiC,KAAKX,MAAMtB,a,GA9FZ0C,a,yBCSXC,EATH,WACR,OACI,kBAAC,IAAD,CAAe3C,MAAM,wBACrB,yBAAKd,UAAU,OACX,kBAAC,EAAD,S,QCEQ0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,0BAAMC,KAAK,wEAAwEC,IAAI,gBAE/Fd,SAASe,eAAe,SDuHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.e9b6df7a.chunk.js","sourcesContent":["import React from \"react\";\nimport './Lyrics.css'\n\nconst Lyrics = (props) => {\n    const theLyrics = props.loading ? <div>Loading Lyrics...</div> : props.artistLyrics.lyrics\n    return (\n        <div className=\"lyric-body\">\n            {props.hidden && props.artistLyrics.lyrics == undefined ?\n                <div>Lyrics Not Found!</div>\n                :\n                <div>{theLyrics}</div>\n            }\n        </div>\n    )\n}\nexport default Lyrics","import React from \"react\";\nimport './FormInput.css'\n\nconst FormInput = (props) => {        \n        return (\n            <div>\n                <div className=\"input-field\">\n                    <form onSubmit={props.handleSubmit}>\n                        <label>\n                            <input\n                                className=\"form-control input-lg ml-3\"\n                                type=\"text\"\n                                value={props.artist}\n                                name=\"artist\"\n                                placeholder=\"Artist Name\"\n                                onChange={props.handleChange}\n                                required\n                            />\n                        </label>\n                        <br />\n                        <label>\n                            <input\n                                className=\"form-control input-lg ml-3\"\n                                type=\"text\"\n                                value={props.title}\n                                name=\"title\"\n                                placeholder=\"Song Title\"\n                                onChange={props.handleSecondChange}\n                                required\n                            />\n                        </label>\n                        <br />\n                        <button className=\"search-button btn btn-danger ml-3\">\n                            <span className=\"glyphicon glyphicon-search\"></span> Search</button>\n                    </form>\n                </div> \n            </div>\n        )\n    }\n\nexport default FormInput","import React from \"react\";\nimport './ITunes.css'\n\nconst ITunes = (props) => {\n    const array = props.itunes.map(itune => {\n        if (props.artist != itune.artistName.toLowerCase()) {\n            return (<div></div>) \n        } else {\n        return (\n            <div className=\"Itunes-url\">\n                <img src={itune.artworkUrl100} />\n                <br />\n                <audio controls>\n                    <source src={itune.previewUrl} />\n                </audio>\n            </div>\n        )}})\n        const ituneAudio = props.loading ? <div>Loading Preview...</div> : array\n    return (\n        <div className=\"lyric-body\">\n            <div>{ituneAudio}</div>\n        </div>\n    )\n\n}     \n\nexport default ITunes","import React, {Component} from \"react\";\nimport axios from 'axios'\nimport Lyrics from '../Lyrics'\nimport FormInput from '../FormInput'\nimport ITunes from '../ITunes'\n\nclass LyricFinder extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loading: false,\n            artistLyrics: {},\n            error: \"\",\n            artist: \"\",\n            title: \"\",\n            itunes: [],\n            hidden: false,\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSecondChange = this.handleSecondChange.bind(this)\n        this.clear = this.clear.bind(this)         \n    }\n    \n    fetchData = async () => {\n        this.setState({ loading: true, error: false })\n        await axios.get(`https://api.lyrics.ovh/v1/${this.state.artist}/${this.state.title}`)\n            .then(res => {\n                this.setState({\n                    loading: false,\n                    artistLyrics: res.data,\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({error: true, loading: false})\n            })\n    }\n\n    fetchItunesData = async () => {\n        this.setState({ loading: true, error: false})\n        await axios.get(`https://itunes.apple.com/search?term=${this.state.artist}&term=${this.state.title}&limit=1`)\n        .then(res => {\n            this.setState({\n                loading: false,\n                itunes: res.data.results,\n            })\n        })\n        .catch(error => {\n            console.log(error)\n            this.setState({error: true, loading: false})\n        })\n    }\n    clear() {\n        this.reset()\n    }\n    handleChange(event) {\n        event.preventDefault()\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n    handleSecondChange(event) {\n        event.preventDefault()\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        this.fetchData()\n        this.fetchItunesData()\n        this.handleChange(event)\n        this.handleSecondChange(event)\n        this.setState({ hidden : true });\n    }\n    componentDidMount() {\n        document.body.style.backgroundColor = \"black\"    \n    }\n    render() {\n        return (\n            <div>\n                <FormInput\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                    handleSecondChange={this.handleSecondChange}\n                    artist={this.state.artist}\n                    title={this.state.title}\n                    clear={this.clear}\n                    hidden={this.state.hidden}\n                />\n                <Lyrics\n                    error={this.state.error}\n                    artistLyrics={this.state.artistLyrics}\n                    loading={this.state.loading}\n                    hidden={this.state.hidden}\n                />\n                <ITunes \n                    error={this.state.error}\n                    itunes={this.state.itunes}\n                    loading={this.state.loading}\n                    artist={this.state.artist}\n                    title={this.state.title}\n                /> \n            </div>\n        )\n    }\n}\nexport default LyricFinder","import React from \"react\";\nimport LyricFinder from './components/LyricFinder'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport DocumentTitle from 'react-document-title';\n\n\nconst App = () => {\n    return (\n        <DocumentTitle title=\"Lyrics iTunes Finder\">\n        <div className=\"App\">\n            <LyricFinder />\n        </div>\n        </DocumentTitle>\n    )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n        <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"></link>\n    </Router>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}