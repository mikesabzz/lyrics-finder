{"ast":null,"code":"var _jsxFileName = \"/Users/michaelsabzevari/Desktop/personal_projects/react/lyrics-finder/src/components/LyricFinder/index.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Lyrics from '../Lyrics';\nimport FormInput from '../FormInput';\nimport Itunes from '../Itunes';\n\nclass LyricFinder extends Component {\n  constructor() {\n    super();\n\n    this.fetchData = async () => {\n      this.setState({\n        loading: true,\n        error: false\n      });\n      await axios.get(`https://api.lyrics.ovh/v1/${this.state.artist}/${this.state.title}`).then(res => {\n        this.setState({\n          loading: false,\n          artistLyrics: res.data\n        });\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          error: true,\n          loading: false\n        });\n      });\n    };\n\n    this.fetchItunesData = async () => {\n      await axios.get(`https://itunes.apple.com/search?term=${this.state.artist}&term=${this.state.title}`).then(res => {\n        this.setState({\n          items: res.data.results\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      loading: false,\n      artistLyrics: {},\n      error: \"\",\n      artist: \"\",\n      title: \"\",\n      items: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSecondChange = this.handleSecondChange.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n\n  clear() {\n    this.reset();\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSecondChange(event) {\n    event.preventDefault();\n    const _event$target2 = event.target,\n          name = _event$target2.name,\n          value = _event$target2.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.fetchData();\n    this.fetchItunesData();\n    this.handleChange(event);\n    this.handleSecondChange(event);\n  }\n\n  componentDidMount() {\n    document.body.style.backgroundColor = \"black\";\n  }\n\n  render() {\n    const error = this.state.error;\n    const items = this.state.items;\n    const array = items.map(item => {\n      return React.createElement(\"audio\", {\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        src: item.previewUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    });\n    const arrayFirst = array[0];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, arrayFirst), React.createElement(FormInput, {\n      handleSubmit: this.handleSubmit,\n      handleChange: this.handleChange,\n      handleSecondChange: this.handleSecondChange,\n      artist: this.state.artist,\n      title: this.state.title,\n      clear: this.clear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), error ? React.createElement(\"div\", {\n      className: \"lyric-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Song Not Found!\") : null, React.createElement(Lyrics, {\n      artistLyrics: this.state.artistLyrics,\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LyricFinder;","map":{"version":3,"sources":["/Users/michaelsabzevari/Desktop/personal_projects/react/lyrics-finder/src/components/LyricFinder/index.js"],"names":["React","Component","axios","Lyrics","FormInput","Itunes","LyricFinder","constructor","fetchData","setState","loading","error","get","state","artist","title","then","res","artistLyrics","data","catch","console","log","fetchItunesData","items","results","handleSubmit","bind","handleChange","handleSecondChange","clear","reset","event","preventDefault","target","name","value","componentDidMount","document","body","style","backgroundColor","render","array","map","item","previewUrl","arrayFirst"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport axios from 'axios'\nimport Lyrics from '../Lyrics'\nimport FormInput from '../FormInput'\nimport Itunes from '../Itunes'\n\nclass LyricFinder extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loading: false,\n            artistLyrics: {},\n            error: \"\",\n            artist: \"\",\n            title: \"\",\n            items: []\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSecondChange = this.handleSecondChange.bind(this)\n        this.clear = this.clear.bind(this) \n        \n    }\n    \n    fetchData = async () => {\n        this.setState({ loading: true, error: false })\n        await axios.get(`https://api.lyrics.ovh/v1/${this.state.artist}/${this.state.title}`)\n            .then(res => {\n                this.setState({\n                    loading: false,\n                    artistLyrics: res.data\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({error: true, loading: false})\n            })\n    }\n\n    fetchItunesData = async () => {\n        await axios.get(`https://itunes.apple.com/search?term=${this.state.artist}&term=${this.state.title}`)\n        .then(res => {\n            this.setState({\n                items: res.data.results,\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n    clear() {\n        this.reset()\n    }\n    handleChange(event) {\n        event.preventDefault()\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n    handleSecondChange(event) {\n        event.preventDefault()\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        this.fetchData()\n        this.fetchItunesData()\n        this.handleChange(event)\n        this.handleSecondChange(event)\n    }\n    componentDidMount() {\n        document.body.style.backgroundColor = \"black\"    \n    }\n    render() {\n        const { error } = this.state\n        const { items } = this.state\n        const array = items.map(item => {\n            return (\n                <audio controls>\n                    <source src={item.previewUrl} />\n                </audio>\n            )\n        })\n        const arrayFirst = array[0]\n        return (\n            <div>\n            <div className=\"text-white\">\n                {arrayFirst}\n            </div>\n                <FormInput\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                    handleSecondChange={this.handleSecondChange}\n                    artist={this.state.artist}\n                    title={this.state.title}\n                    clear={this.clear}\n                />\n                {error ?\n                    <div\n                        className=\"lyric-body\">\n                        Song Not Found!\n                        </div>\n                    : null\n                }\n                <Lyrics\n                    artistLyrics={this.state.artistLyrics}\n                    loading={this.state.loading}\n                />\n                {/* <Itunes \n                    artist={this.state.artist}\n                    title={this.state.title}\n                    handleSubmit={this.handleSubmit}\n                /> */}\n            </div>\n        )\n    }\n}\n\nexport default LyricFinder"]},"metadata":{},"sourceType":"module"}