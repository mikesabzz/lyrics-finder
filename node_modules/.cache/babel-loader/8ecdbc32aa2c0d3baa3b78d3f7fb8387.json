{"ast":null,"code":"var _jsxFileName = \"/Users/michaelsabzevari/Desktop/personal_projects/react/lyrics-finder/src/components/ITunes/index.js\";\nimport React from \"react\";\n\nconst ITunes = props => {\n  const array = props.itunes.map(itune => {\n    artistNames = itune.artistName.toLowerCase();\n    trackNames = itune.trackName.toLowerCase();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: itune.previewUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    })), React.createElement(\"img\", {\n      src: itune.artworkUrl100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }));\n  });\n  const condition = props.artist === artistNames && props.title === trackNames ? {\n    array\n  } : null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, condition, props.error ? React.createElement(\"div\", {\n    className: \"lyric-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Preview Not Found!\") : null);\n};\n\nexport default ITunes;","map":{"version":3,"sources":["/Users/michaelsabzevari/Desktop/personal_projects/react/lyrics-finder/src/components/ITunes/index.js"],"names":["React","ITunes","props","array","itunes","map","itune","artistNames","artistName","toLowerCase","trackNames","trackName","previewUrl","artworkUrl100","condition","artist","title","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAI;AACpCC,IAAAA,WAAW,GAAGD,KAAK,CAACE,UAAN,CAAiBC,WAAjB,EAAd;AACAC,IAAAA,UAAU,GAAGJ,KAAK,CAACK,SAAN,CAAgBF,WAAhB,EAAb;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,QAAQ,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAEH,KAAK,CAACM,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,GAAG,EAAEN,KAAK,CAACO,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH,GAXa,CAAd;AAYA,QAAMC,SAAS,GAAKZ,KAAK,CAACa,MAAN,KAAiBR,WAAlB,IAAmCL,KAAK,CAACc,KAAN,KAAgBN,UAApD,GAClB;AAACP,IAAAA;AAAD,GADkB,GACR,IADV;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKW,SAFL,EAKKZ,KAAK,CAACe,KAAN,GACG;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADH,GAIC,IATN,CADJ;AAaH,CA5BD;;AA6BA,eAAehB,MAAf","sourcesContent":["import React from \"react\";\n\nconst ITunes = (props) => {\n    const array = props.itunes.map(itune => {\n        artistNames = itune.artistName.toLowerCase()\n        trackNames = itune.trackName.toLowerCase()\n        return (\n            <div>\n                <audio controls>\n                    <source src={itune.previewUrl} />\n                </audio>\n                <img src={itune.artworkUrl100} />\n            </div>\n        )\n    })\n    const condition = ((props.artist === artistNames) && (props.title === trackNames)) ? \n    {array} : null\n    return (\n        <div>\n            {/* {array} */}\n            {condition}\n\n            \n            {props.error ? \n                <div className=\"lyric-body\">\n                    Preview Not Found!\n                </div> \n            : null}\n        </div>\n    )\n}\nexport default ITunes"]},"metadata":{},"sourceType":"module"}